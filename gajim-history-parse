#!/usr/bin/env perl

my $copyright= <<'COPYRIGHT';
# Copyright 2022 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use Date::Parse ();
use Chj::xperlfunc ":all";
use Chj::xopen qw(possibly_fh_to_fh);
use FP::Ops qw(the_method);
use FP::List;
use FP::Lazy;
use FP::Text::CSV qw(rows_to_csv_fh
                     rows_to_csv_file);

use Getopt::Long;
# use FP::Repl::Trap; #

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "Usage: $myname file(s)

  Print reformatted as tab-separated CSV file (messages are split into
  multiple rows on newlines, column C contains '...' for continuation
  rows), with the time stamp reformatted as unix time. If multiple
  files are given, merge them. When merging, the oldest time stamp of
  all copies of the same message is used.

  Options:
    --repl

  ($email_full)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
our $opt_repl;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "repl"=> \$opt_repl,
	   ) or exit 1;
usage unless @ARGV;



sub unixtime($str) {
    Date::Parse::str2time($str) // die "bogus date: '$str'"
}

sub trimboth($str) {
    $str=~ s/^\s+//s;
    $str=~ s/\s+\z//s;
    $str
}

my $uniform_name = sub($str) {
    # $str=~ s/_//sg;
    # actually seems to be using same way on both ends
    $str
};

package Item {
    use FP::List;

    sub multirow($time, $name, $str, $tail) {
        my @rlines = reverse split /\n/, main::trimboth($str);
        while (@rlines) {
            my $line = shift @rlines;
            my $C = @rlines ? "..." : "";
            $tail = cons [ $time, $name, $C, $line ], $tail
        }
        $tail
    }

    use FP::Struct [ "unixtime", "name", "datestr", "content" ]
        => "FP::Struct::Show", "FP::Struct::Equal";

    sub cons_rows($self, $tail) {
        multirow($self->unixtime,
                 $uniform_name->($self->name),
                 $self->content,
                 $tail)
    }

    _END_
}
Item::constructors->import;

sub parse($path) {
    my $s = xgetfile_utf8 $path;
    my @items;
    while ($s=~ m/\G\n?(\w+) on ([^\n]*?) said:(.*?)(\s*$|\n\w+ on [^\n]*? said:)/sgc) {
        my ($name, $datestr, $content, $after) = ($1, $2, $3, $4);
        push @items, Item(unixtime($datestr), $name, $datestr,
                          trimboth($content));
        last if $after =~ /^\s*\z/s;
        pos($s) -= length $after;
    }
    list @items
}

my $out = possibly_fh_to_fh(*STDOUT{IO});
$out->xbinmode(":encoding(utf-8)");

sub printstream($items) {
    my $rows = $items->fold_right(the_method("cons_rows"), list());
    rows_to_csv_fh($rows, $out, +{sep_char => "\t", eol=> "\n" });
}

sub merge($vs1, $vs2) {
    if ($vs1->is_null) {
        $vs2
    } elsif ($vs2->is_null) {
        $vs1
    } else {
        lazy {
            my ($a, $b) = ($vs1->first, $vs2->first);
            if ($a->content eq $b->content
                and
                $a->name eq $b->name) {
                my $rest = merge($vs1->rest, $vs2->rest);
                my $v = ($a->unixtime < $b->unixtime) ? $a : $b;
                cons $v, $rest
            } else {
                if ($a->unixtime < $b->unixtime) {
                    cons $a, merge($vs1->rest, $vs2)
                } else {
                    cons $b, merge($vs1, $vs2->rest)
                }
            }
        }
    }
}

my @itemss = map { parse $_ } @ARGV;

if ($opt_repl) {
    # use FP::Repl; repl;
    require FP::Repl; FP::Repl::repl();
} else {
    my $s = list(@itemss)->reduce(\&merge);
    printstream $s;
}
